# This file defines the CI/CD pipeline for the Mobile SDK Android project.
# It automates the process of building, testing, and releasing the SDK.
#
# Docker Image:
# This pipeline uses a custom Docker image for building Android projects.
# Reference: https://hub.docker.com/r/mingc/android-build-box/
image: mingc/android-build-box:latest # Sets the latest version of the image
# NB: Java version is set in .java-version file
# Alternative is to set a specific version: https://hub.docker.com/r/mingc/android-build-box/tags
#image: mingc/android-build-box:1.28.0

# Variables:
# These variables define the Android SDK versions used for building the project.
variables:
  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "35"
  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion. See: SDK Manager > BuildTools
  ANDROID_BUILD_TOOLS: "35.0.0"
  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "11076708"

# Stages:
# Defines the stages of the pipeline. Jobs within the same stage run in parallel.
# Jobs in subsequent stages run after the previous stage has completed successfully.
stages:
  - quality # Stage for code quality checks (e.g., linting, static analysis).
  - code_quality # Stage for linting the codebase using detekt
  - versioning # Stage for incrementing version code for new builds.
  - test # Stage for running unit and integration tests.
  - build # Stage for building the Android application.
  - deploy # Stage for deploying build to Firebase App Distribution.
  - tag # Stage for tagging a release.
  - gitlab_release # Stage for creating a release in GitLab.
  - github_release # Stage for creating a release in GitHub.
  - publish # Stage for publishing the SDK to GitHub.

# Include:
# Includes an external template for security checks from another project.
# This template is located in the 'paydock/platform/gitlab-templates' project.
include:
  - project: 'paydock/platform/gitlab-templates'
    ref: main
    file: '/security/gitlab-defectdojo.yaml' # Includes security checks from the DefectDojo template.

# .setup_bundler:
# This is a hidden job template that sets up the Ruby Bundler environment.
# It is used by other jobs to ensure they have the necessary Ruby dependencies.
.setup_bundler:
  cache:
    paths:
      - vendor/bundle # Caches the Ruby dependencies to speed up subsequent runs.
  before_script:
    - chmod +x scripts/setup_bundler.sh # Ensure it is executable in CI
    - scripts/setup_bundler.sh # Run the script
  script:
    - bundle --version # Checks the version of Bundler.

# linting:
# This job runs linting checks on the codebase using detekt.
# It extends the '.setup_bundler' template to ensure the Ruby dependencies are set up.
code_quality:
  stage: code_quality # Runs in the 'code_quality' stage.
  extends: .setup_bundler # Inherits configurations (like Bundler setup) from the '.setup_bundler' template.
  script:
    - bundle exec fastlane code_quality # Executes the 'formatting, style, issues' lane in Fastlane.
  rules:
    - if: $CI_COMMIT_BRANCH  # Run on all branch pushes
      when: on_success
    - if: $CI_MERGE_REQUEST_IID # Run on merge (Merge Results)
      when: on_success

## test: (All flavors are the same)
## This job runs the unit tests for the various flavors of the Android application.
test:
  stage: test # Runs in the 'test' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template.
  script:
    - bundle exec fastlane test flavor:staging build_type:Debug
  environment:
    name: staging # Sets the environment name to 'staging'.
  artifacts:
    expire_in: 7 days
    when: always # Always creates artifacts, even if the job fails.
    reports:
      junit: mobile-sdk/build/test-results/testDebugUnitTest/TEST-*.xml # Publishes the JUnit test reports.
  rules:
    - when: on_success # Only run when the previous job in the pipeline has succeeded.

# increment_version:
# This job increments the version code for the build and deployment.
increment_version:
  stage: versioning # Specifies that this job runs in the '.pre' stage, which should be defined before other stages.
  extends: .setup_bundler # Inherits configurations (like Bundler setup) from the '.setup_bundler' template.
  rules: # Defines conditions for when this job should be executed.
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Checks if the current branch is the default branch (e.g., 'main').
      when: on_success # Specifies that the job runs automatically when a pipeline successfully reaches this stage.
      # This condition ensures the job runs only when changes are merged into the default branch.
  script: # Defines the commands to run when the job is executed.
    - bundle exec fastlane update_version_code # Executes the 'update_version_code' lane in Fastlane.
    # This lane is responsible for:
    #   1. Reading the current version number from GitLab CI variables (VERSION_NAME, VERSION_CODE).
    #   2. Incrementing the version number and version code.
    #   3. Updating the GitLab CI variables with the new versions.
    #   4. Updating the version number in the 'build.gradle.kts' file.

# pull_bin_file:
# This job pulls a zip file from an AWS S3 bucket and extracts its contents.
pull_bin_file:
  stage: build # Runs in the 'build' stage.
  image: 412245956714.dkr.ecr.ap-southeast-2.amazonaws.com/ci:20241212-1584910654 # Uses a specific Docker image for this job.
  script: |
    aws s3 cp s3://pd-app-bin-management-staging-11/bins.zip bin_schema/bins.zip # Copies the zip file from S3.
    unzip bin_schema/bins.zip -d bin_schema/ # Extracts the zip file to the 'bin_schema/' directory.
  artifacts:
    paths:
      - bin_schema/ # Makes the 'bin_schema/' directory available as an artifact for subsequent jobs.
  rules:
    #    - if: $CI_COMMIT_BRANCH  # Run on all branch pushes
    #      when: on_success
    - if: $CI_MERGE_REQUEST_IID # Run on merge (Merge Results)
      when: on_success
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run on merge to main
      when: on_success

# .build_template:
# This is a hidden job template for building the Android application.
# It extends the '.setup_bundler' template and copies the card schemes file.
.build_template:
  stage: build # Runs in the 'build' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template.
  script:
    - cp bin_schema/card-schemes.json ./mobile-sdk/src/main/assets/card_schemas.json # Copies the card schemes file to the assets directory.
  artifacts:
    expire_in: 7 days
    paths:
      - sample/build/outputs/apk/* # Makes the APK files available as artifacts.
      - bin_schema/ # Makes the 'bin_schema/' directory available as an artifact.
  dependencies:
    - pull_bin_file # Specifies the dependency on the 'pull_bin_file' job

# buildStaging:
# This job builds the staging version of the Android application.
build_staging:
  extends: .build_template # Extends the '.build_template' template.
  script:
    - bundle exec fastlane buildDebug flavor:staging # Executes the 'build' lane using staging flavor in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the actual build process.
  environment:
    name: staging
  needs: [pull_bin_file]
  rules:
    #    - if: $CI_COMMIT_BRANCH  # Run on all branch pushes
    #      when: on_success
    - if: $CI_MERGE_REQUEST_IID # Run on merge (Merge Results)
      when: on_success
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run on merge to main
      when: on_success

# buildPreProd:
# This job builds the preprod version of the Android application.
build_preprod:
  extends: .build_template # Extends the '.build_template' template.
  script:
    - bundle exec fastlane buildDebug flavor:preprod # Executes the 'build' lane using preprod flavor in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the actual build process.
  environment:
    name: pre-production
  needs: [ code_quality, pull_bin_file, increment_version ]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run automatically on merge to main
      when: on_success

# buildProd:
# This job builds the production version of the Android application.
build_prod:
  extends: .build_template # Extends the '.build_template' template.
  script:
    - bundle exec fastlane buildDebug flavor:prod # Executes the 'build' lane using prod flavor in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the actual build process.
  environment:
    name: production
  needs: [pull_bin_file, increment_version]
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run on merge to main
      when: on_success

# .deploy_template:
# This is a hidden job template for deploying the Android application to Firebase App Distribution.
# This template handles the setup of the Bundler and Google Cloud credentials required for the pipeline and Firebase interaction.
.deploy_template:
  stage: deploy # Runs in the 'deploy' stage.
  cache:
    paths:
      - vendor/bundle # Caches the Ruby dependencies to speed up subsequent runs.
  variables:
    # Inherit from global variables
    GOOGLE_APPLICATION_CREDENTIALS_BASE64: $GOOGLE_APPLICATION_CREDENTIALS_BASE64
  before_script:
    # Set up the Bundler environment
    - chmod +x scripts/setup_bundler.sh # Ensure it is executable in CI
    - scripts/setup_bundler.sh # Run the script
    # Decode the base64 encoded Google Cloud credentials and save them to a file.
    - echo ${GOOGLE_APPLICATION_CREDENTIALS_BASE64} | base64 -d > private-key.json
    # Get the absolute path of the credentials file.
    - FILE_LOCATION=$(realpath private-key.json)
    - echo $FILE_LOCATION
    # Set the GOOGLE_CREDENTIALS_FILE_PATH environment variable for use by Fastlane.
    - export GOOGLE_CREDENTIALS_FILE_PATH=$FILE_LOCATION # Set the environment variable

# deployStaging:
# This job deploys the staging version of the Android application to Firebase App Distribution.
# It extends the '.deploy_template' to inherit the necessary setup and configuration.
deploy_staging:
  extends: .deploy_template # Inherits configuration from the .deploy_template template.
  variables:
    APP_ID: $FIREBASE_APP_ID_STAGING # Firebase App ID for the staging environment.
  environment:
    name: staging # Sets the environment name to 'staging'.
  needs:
    - job: build_staging
  script:
    - bundle exec fastlane deploy flavor:staging # Executes the 'deploy' lane using staging flavor in the Fastfile.
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run on merge to main
      when: on_success

# deployPreProd:
# This job deploys the preprod version of the Android application to Firebase App Distribution.
# It extends the '.deploy_template' to inherit the necessary setup and configuration.
deploy_preprod:
  extends: .deploy_template # Inherits configuration from the .deploy_template template.
  variables:
    APP_ID: $FIREBASE_APP_ID_PREPROD # Firebase App ID for the preprod environment.
  environment:
    name: pre-production # Sets the environment name to 'pre-production'.
  needs:
    - job: build_preprod
  script:
    - bundle exec fastlane deploy flavor:preprod # Executes the 'deploy' lane using preprod flavor in the Fastfile.
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run on merge to main
      when: on_success

# deployProd:
# This job deploys the production version of the Android application to Firebase App Distribution.
# It extends the '.deploy_template' to inherit the necessary setup and configuration.
deploy_prod:
  extends: .deploy_template # Inherits configuration from the .deploy_template template.
  variables:
    APP_ID: $FIREBASE_APP_ID_PROD # Firebase App ID for the production environment.
  environment:
    name: production # Sets the environment name to 'production'.
  needs:
    - job: build_prod
  script:
    - bundle exec fastlane deploy flavor:prod # Executes the 'deploy' lane using prod flavor in the Fastfile.
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run on merge to main
      when: on_success

# tag_release:
# This job tags a release in the repository.
tag_release:
  stage: tag # Runs in the 'tag' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template.
  script:
    - bundle exec fastlane tag_release # Executes the 'tag_release' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the tagging process.
  rules:
    - if: $CI_COMMIT_BRANCH == "release" # Run on commit is made to the 'release' branch.
      when: on_success

# create_gitlab_release:
# This job creates a release in GitLab.
create_gitlab_release:
  stage: gitlab_release # Runs in the 'gitlab_release' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template to set up the Ruby environment.
  script:
    - bundle exec fastlane create_gitlab_release version:$CI_COMMIT_TAG # Executes the 'create_gitlab_release' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the following:
    #   - Authenticating with GitHub using a personal access token.
    #   - Creating a new release on Gitlab with the specified tag name.
    #   - Adding release notes or a description to the release.
    #   - Potentially uploading release assets (e.g., APKs) to the release.
  rules:
    - if: $CI_COMMIT_BRANCH == "release" # Run on commit is made to the 'release' branch.
      when: on_success

# create_github_release:
# This job creates a release in GitHub.
# It is triggered when a new tag is pushed to the 'release' branch.
# This job uses Fastlane to interact with the GitHub API.
create_github_release:
  stage: github_release # Runs in the 'github_release' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template to set up the Ruby environment.
  script:
    - bundle exec fastlane create_github_release$CI_COMMIT_TAG # Executes the 'create_github_release' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the following:
    #   - Authenticating with GitHub using a personal access token.
    #   - Creating a new release on GitHub with the specified tag name.
    #   - Adding release notes or a description to the release.
    #   - Potentially uploading release assets (e.g., APKs) to the release.
  rules:
    - if: $CI_COMMIT_BRANCH == "release" # Run on commit is made to the 'release' branch.
      when: on_success

# publish_to_github:
# This job publishes the built SDK to GitHub.
# It is triggered when a new tag is pushed to the 'release' branch.
# This job uses Fastlane to interact with the GitHub API.
publish_to_github:
  stage: publish # Runs in the 'publish' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template to set up the Ruby environment.
  script:
    - bundle exec fastlane publish_to_github # Executes the 'publish_to_github' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the following:
    #   - Authenticating with GitHub using a personal access token.
    #   - Uploading the built SDK (e.g., AAR file) as a release asset to the GitHub release.
    #   - Potentially updating the release notes or description.
  rules:
    - if: $CI_COMMIT_BRANCH == "release" # Run on commit is made to the 'release' branch.
      when: on_success