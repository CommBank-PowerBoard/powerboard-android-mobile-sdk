# This file defines the CI/CD pipeline for the Mobile SDK Android project.
# It automates the process of building, testing, and releasing the SDK.
#
# Docker Image:
# This pipeline uses a custom Docker image for building Android projects.
# Reference: https://hub.docker.com/r/mingc/android-build-box/
image: mingc/android-build-box:latest # Sets the latest version of the image
# NB: Java version is set in .java-version file
# Alternative is to set a specific version: https://hub.docker.com/r/mingc/android-build-box/tags
#image: mingc/android-build-box:1.28.0

# Variables:
# These variables define the Android SDK versions used for building the project.
variables:
  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "35"
  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion. See: SDK Manager > BuildTools
  ANDROID_BUILD_TOOLS: "35.0.0"
  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "11076708"

# Stages:
# Defines the stages of the pipeline. Jobs within the same stage run in parallel.
# Jobs in subsequent stages run after the previous stage has completed successfully.
stages:
  - quality # Stage for code quality checks (e.g., linting, static analysis).
  - build # Stage for building the Android application.
  - test # Stage for running unit and integration tests.
  - tag # Stage for tagging a release.
  - gitlab_release # Stage for creating a release in GitLab.
  - github_release # Stage for creating a release in GitHub.
  - publish # Stage for publishing the SDK to GitHub.

# Include:
# Includes an external template for security checks from another project.
# This template is located in the 'paydock/platform/gitlab-templates' project.
include:
  - project: 'paydock/platform/gitlab-templates'
    ref: main
    file: '/security/gitlab-defectdojo.yaml' # Includes security checks from the DefectDojo template.

# .setup_bundler:
# This is a hidden job template that sets up the Ruby Bundler environment.
# It is used by other jobs to ensure they have the necessary Ruby dependencies.
.setup_bundler:
  cache:
    paths:
      - vendor/bundle # Caches the Ruby dependencies to speed up subsequent runs.
  before_script:
    - gem install bundler -v 1.17.2 # Installs a specific version of Bundler.
    - bundle update # Updates the Ruby dependencies.
  script:
    - bundle --version # Checks the version of Bundler.

# pull_bin_file:
# This job pulls a zip file from an AWS S3 bucket and extracts its contents.
pull_bin_file:
  stage: build # Runs in the 'build' stage.
  image: 412245956714.dkr.ecr.ap-southeast-2.amazonaws.com/ci:20241212-1584910654 # Uses a specific Docker image for this job.
  script: |
    aws s3 cp s3://pd-app-bin-management-staging-11/bins.zip bin_schema/bins.zip # Copies the zip file from S3.
    unzip bin_schema/bins.zip -d bin_schema/ # Extracts the zip file to the 'bin_schema/' directory.
  artifacts:
    paths:
      - bin_schema/ # Makes the 'bin_schema/' directory available as an artifact for subsequent jobs.

# .build_template:
# This is a hidden job template for building the Android application.
# It extends the '.setup_bundler' template and copies the card schemes file.
.build_template:
  stage: build # Runs in the 'build' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template.
  script:
    - cp bin_schema/card-schemes.json ./mobile-sdk/src/main/assets/card_schemas.json # Copies the card schemes file to the assets directory.
  artifacts:
    paths:
      - sample/build/outputs/apk/* # Makes the APK files available as artifacts.
      - bin_schema/ # Makes the 'bin_schema/' directory available as an artifact.
  needs: ["pull_bin_file"] # This job depends on the 'pull_bin_file' job.
  dependencies:
    - pull_bin_file # Specifies the dependency on the 'pull_bin_file' job.

# buildStaging:
# This job builds the staging version of the Android application.
buildStaging:
  extends: .build_template # Extends the '.build_template' template.
  script:
    - bundle exec fastlane buildStaging # Executes the 'buildStaging' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the actual build process.
  environment:
    name: staging
  rules:
    - if: $CI_COMMIT_BRANCH # Run on all branches

# buildPreProd:
# This job builds the sandbox version of the Android application.
buildPreProd:
  extends: .build_template # Extends the '.build_template' template.
  script:
    - bundle exec fastlane buildPreProd # Executes the 'buildPreProd' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the actual build process.
  environment:
    name: pre-production
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run automatically on merge to main
      when: on_success

# buildProd:
# This job builds the production version of the Android application.
buildProd:
  extends: .build_template # Extends the '.build_template' template.
  script:
    - bundle exec fastlane buildProd # Executes the 'buildProd' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the actual build process.
  environment:
    name: production
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH # Run automatically on merge to main
      when: on_success

# test:
# This job runs the unit tests for the Android application.
test:
  stage: test # Runs in the 'test' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template.
  script:
    - bundle exec fastlane test # Executes the 'test' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the test execution.
  artifacts:
    when: always # Always creates artifacts, even if the job fails.
    reports:
      junit: mobile-sdk/build/test-results/testDebugUnitTest/TEST-*.xml # Publishes the JUnit test reports.

# tag_release:
# This job tags a release in the repository.
tag_release:
  stage: tag # Runs in the 'tag' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template.
  only:
    - release # Only runs when a commit is made to the 'release' branch.
  script:
    - bundle exec fastlane tag_release # Executes the 'tag_release' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the tagging process.

# create_gitlab_release:
# This job creates a release in GitLab.
create_gitlab_release:
  stage: gitlab_release # Runs in the 'gitlab_release' stage.
  image: registry.gitlab.com/gitlab-org/release-cli:latest # Uses the GitLab release CLI image.
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "release"' # Only runs if a tag is created on the 'release' branch.
  script:
    - echo "running release_job for $TAG" # Prints a message to the console.
  release:
    name: 'Release: v${CI_COMMIT_TAG}' # Sets the release name.
    description: '$CI_COMMIT_TAG' # Sets the release description.
    tag_name: '$CI_COMMIT_TAG' # Sets the tag name.
    ref: '$CI_COMMIT_SHA' # Sets the reference commit.
    assets:
      links:
        - name: 'MobileSDK Documentation' # Creates a link to the MobileSDK documentation.
          url: 'https://github.com/PayDock/mobile-sdk-doc/tree/main'

# create_github_release:
# This job creates a release in GitHub.
# It is triggered when a new tag is pushed to the 'release' branch.
# This job uses Fastlane to interact with the GitHub API.
create_github_release:
  stage: github_release # Runs in the 'github_release' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template to set up the Ruby environment.
  only:
    - release # Only runs when a commit is made to the 'release' branch.
  script:
    - bundle exec fastlane create_github_release # Executes the 'create_github_release' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the following:
    #   - Authenticating with GitHub using a personal access token.
    #   - Creating a new release on GitHub with the specified tag name.
    #   - Adding release notes or a description to the release.
    #   - Potentially uploading release assets (e.g., APKs) to the release.

# publish_to_github:
# This job publishes the built SDK to GitHub.
# It is triggered when a new tag is pushed to the 'release' branch.
# This job uses Fastlane to interact with the GitHub API.
publish_to_github:
  stage: publish # Runs in the 'publish' stage.
  extends: .setup_bundler # Extends the '.setup_bundler' template to set up the Ruby environment.
  only:
    - release # Only runs when a commit is made to the 'release' branch.
  script:
    - bundle exec fastlane publish_to_github # Executes the 'publish_to_github' lane in the Fastfile.
    # Fastfile Reference: This lane is defined in the Fastfile and handles the following:
    #   - Authenticating with GitHub using a personal access token.
    #   - Uploading the built SDK (e.g., AAR file) as a release asset to the GitHub release.
    #   - Potentially updating the release notes or description.